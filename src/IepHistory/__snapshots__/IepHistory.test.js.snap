// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IEP History should render the current IEP level correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(CurrentIepLevel)
    store={
      Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "days": 625,
      "dispatch": [MockFunction],
      "level": "Standard",
      "nextReviewDate": "15/08/2018",
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "days": 625,
        "dispatch": [MockFunction],
        "level": "Standard",
        "nextReviewDate": "15/08/2018",
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [MockFunction],
            "getState": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
              ],
            },
            "subscribe": [MockFunction] {
              "calls": Array [
                Array [
                  [Function],
                ],
              ],
            },
          },
          "unsubscribe": undefined,
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": true,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): Object {
    "storeSubscription": undefined,
  },
}
`;

exports[`IEP History should render the iep history table correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(IepHistory)
    store={
      Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "dispatch": [MockFunction],
      "results": Array [
        Object {
          "agencyId": "LEI",
          "bookingId": -1,
          "formattedTime": "13/08/2017 - 16:04",
          "iepDate": "2017-08-13",
          "iepEstablishment": "Leeds",
          "iepLevel": "Standard",
          "iepStaffMember": "Staff Member",
          "iepTime": "2017-08-13T16:04:35",
          "userId": "ITAG_USER",
        },
      ],
      "store": Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "dispatch": [MockFunction],
        "results": Array [
          Object {
            "agencyId": "LEI",
            "bookingId": -1,
            "formattedTime": "13/08/2017 - 16:04",
            "iepDate": "2017-08-13",
            "iepEstablishment": "Leeds",
            "iepLevel": "Standard",
            "iepStaffMember": "Staff Member",
            "iepTime": "2017-08-13T16:04:35",
            "userId": "ITAG_USER",
          },
        ],
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [MockFunction],
            "getState": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
              ],
            },
            "subscribe": [MockFunction] {
              "calls": Array [
                Array [
                  [Function],
                ],
              ],
            },
          },
          "unsubscribe": undefined,
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": true,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): Object {
    "storeSubscription": undefined,
  },
}
`;
